package gui;

import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.net.URL;
import java.text.DecimalFormat;
import java.awt.event.*;
import java.util.ArrayList;

import customcomponent.PillButton;
import customcomponent.PlaceholderSupport;
import customcomponent.RoundedBorder;
import dao.SanPham_DAO;
import entity.SanPham;
import enums.DuongDung;
import enums.LoaiSanPham;

public class SanPham_GUI extends JPanel implements ActionListener, MouseListener {

    private JPanel pnCenter, pnHeader, pnLoc;
    private DefaultTableModel modelSP;
    private JTable tblSP;
    private JScrollPane scrSP;
    private JTextField txtSearch;
    private PillButton btnThem, btnCapNhat, btnXoa, btnXemChiTiet;
    private JComboBox<String> cboLoaiHang;
    
    // DecimalFormat ƒë·ªÉ hi·ªÉn th·ªã ti·ªÅn t·ªá c√≥ d·∫•u ph√¢n c√°ch
    private DecimalFormat df = new DecimalFormat("#,##0 ƒë"); 
    private SanPham_DAO sanPhamDAO;

    // ƒê·ªãnh nghƒ©a m√†u s·∫Øc
    private final Color blueMint = new Color(180, 220, 240);
    private final Color pinkPastel = new Color(255, 200, 220);

    public SanPham_GUI() {
        // Kh·ªüi t·∫°o DAO ngay khi t·∫°o ƒë·ªëi t∆∞·ª£ng GUI
        sanPhamDAO = new SanPham_DAO(); 
        initialize();
    }

    // --- KH·ªûI T·∫†O GIAO DI·ªÜN CH√çNH ---
    
    private void initialize() {
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(1537, 1168));

        // 1. HEADER (V√πng t√¨m ki·∫øm v√† n√∫t ch·ª©c nƒÉng)
        pnHeader = new JPanel(null);
        pnHeader.setPreferredSize(new Dimension(1073, 88));
        pnHeader.setBackground(new Color(0xE3F2F5));
        add(pnHeader, BorderLayout.NORTH);

        setupHeaderComponents();

        // 2. CENTER (B·∫£ng d·ªØ li·ªáu)
        pnCenter = new JPanel(new BorderLayout());
        add(pnCenter, BorderLayout.CENTER);

        initTable();
        loadSanPham(); // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
    }
    
    private void setupHeaderComponents() {
        // √î t√¨m ki·∫øm
        txtSearch = new JTextField();
        txtSearch.setBounds(20, 17, 420, 60);
        txtSearch.setFont(new Font("Segoe UI", Font.PLAIN, 18));
        txtSearch.setBorder(new RoundedBorder(20));
        PlaceholderSupport.addPlaceholder(txtSearch, "T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n ho·∫∑c m√£");
        pnHeader.add(txtSearch);
        txtSearch.addActionListener(e -> timKiemSanPham()); // S·ª± ki·ªán khi nh·∫•n Enter

        // Panel L·ªçc theo lo·∫°i h√†ng
        pnLoc = new JPanel(null);
        pnLoc.setBounds(460, 10, 400, 70);
        pnLoc.setBorder(BorderFactory.createTitledBorder(new RoundedBorder(20), "L·ªçc lo·∫°i"));
        pnLoc.setBackground(new Color(0, 0, 0, 0)); // N·ªÅn trong su·ªët
        pnHeader.add(pnLoc);

        cboLoaiHang = new JComboBox<>();
        cboLoaiHang.setFont(new Font("Tahoma", Font.PLAIN, 18));
        cboLoaiHang.setBounds(75, 19, 250, 40);
        pnLoc.add(cboLoaiHang);
        loadLoaiSanPham();
        cboLoaiHang.addActionListener(e -> locTheoLoai()); // S·ª± ki·ªán khi ch·ªçn lo·∫°i

        // C√°c n√∫t ch·ª©c nƒÉng
        btnThem = new PillButton("Th√™m");
        btnThem.setFont(new Font("Segoe UI", Font.BOLD, 18));
        btnThem.setBounds(895, 30, 120, 40);
        btnThem.addActionListener(this);
        pnHeader.add(btnThem);

        btnCapNhat = new PillButton("C·∫≠p nh·∫≠t");
        btnCapNhat.setFont(new Font("Segoe UI", Font.BOLD, 18));
        btnCapNhat.setBounds(1045, 30, 120, 40);
        btnCapNhat.addActionListener(this);
        pnHeader.add(btnCapNhat);

        btnXoa = new PillButton("X√≥a");
        btnXoa.setFont(new Font("Segoe UI", Font.BOLD, 18));
        btnXoa.setBounds(1185, 30, 100, 40);
        btnXoa.addActionListener(this);
        pnHeader.add(btnXoa);

        btnXemChiTiet = new PillButton("Chi ti·∫øt");
        btnXemChiTiet.setFont(new Font("Segoe UI", Font.BOLD, 18));
        btnXemChiTiet.setBounds(1300, 30, 140, 40);
        btnXemChiTiet.addActionListener(this);
        pnHeader.add(btnXemChiTiet);
    }

    // --- X·ª¨ L√ù S·ª∞ KI·ªÜN C·ª¶A N√öT ---

    @Override
    public void actionPerformed(ActionEvent e) {
        Object src = e.getSource();
        // L·∫•y JFrame cha ƒë·ªÉ m·ªü Dialog (quan tr·ªçng)
        JFrame parent = (JFrame) SwingUtilities.getWindowAncestor(this); 

        if (src.equals(btnThem)) {
            // NOTE: C·∫ßn c√≥ class ThemSanPham_Dialog ƒë·ªÉ ch·ª©c nƒÉng n√†y ho·∫°t ƒë·ªông
            ThemSanPham_Dialog dialog = new ThemSanPham_Dialog(parent); 
            dialog.setVisible(true);
            if (dialog.isCreated()) loadSanPham();
        }
        else if (src.equals(btnCapNhat)) {
            int row = tblSP.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn s·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t!");
                return;
            }
            // L·∫•y M√£ SP t·ª´ c·ªôt th·ª© 1 (index 1)
            String maSP = modelSP.getValueAt(row, 1).toString(); 
            SanPham sp = sanPhamDAO.laySanPhamTheoMa(maSP);
            // NOTE: C·∫ßn c√≥ class CapNhatSanPham_Dialog ƒë·ªÉ ch·ª©c nƒÉng n√†y ho·∫°t ƒë·ªông
            CapNhatSanPham_Dialog dlg = new CapNhatSanPham_Dialog(parent, sp); 
            dlg.setVisible(true);
            if (dlg.isUpdated()) loadSanPham();
        }
        else if (src.equals(btnXoa)) {
            int row = tblSP.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Ch·ªçn s·∫£n ph·∫©m c·∫ßn x√≥a!");
                return;
            }
            String maSP = modelSP.getValueAt(row, 1).toString();
            int confirm = JOptionPane.showConfirmDialog(this, 
                "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m " + maSP + " kh√¥ng?", 
                "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                if (sanPhamDAO.xoaSanPham(maSP)) {
                    JOptionPane.showMessageDialog(this, "ƒê√£ x√≥a th√†nh c√¥ng!");
                    loadSanPham();
                } else {
                    JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        else if (src.equals(btnXemChiTiet)) {
            int row = tblSP.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt!");
                return;
            }
            String maSP = modelSP.getValueAt(row, 1).toString();
            SanPham sp = sanPhamDAO.laySanPhamTheoMa(maSP);
            if (sp != null)
                // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c∆° b·∫£n c·ªßa s·∫£n ph·∫©m
                JOptionPane.showMessageDialog(this,
                        "M√£: " + sp.getMaSanPham() + "\nT√™n: " + sp.getTenSanPham() +
                        "\nGi√° nh·∫≠p: " + df.format(sp.getGiaNhap()) +
                        "\nK·ªá b√°n: " + sp.getKeBanSanPham(),
                        "Chi ti·∫øt s·∫£n ph·∫©m", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // --- KH·ªûI T·∫†O V√Ä ƒê·ªäNH D·∫†NG B·∫¢NG ---

    private void initTable() {
        String[] cols = {
            "H√¨nh ·∫£nh", "M√£ s·∫£n ph·∫©m", "T√™n s·∫£n ph·∫©m", "Lo·∫°i s·∫£n ph·∫©m",
            "S·ªë ƒëƒÉng k√Ω", "ƒê∆∞·ªùng d√πng", "Gi√° nh·∫≠p", "Gi√° b√°n",
            "K·ªá b√°n", "Tr·∫°ng th√°i"
        };

        modelSP = new DefaultTableModel(cols, 0) {
            // NOTE: B·∫≠t t√≠nh nƒÉng hi·ªÉn th·ªã ImageIcon cho c·ªôt ƒë·∫ßu ti√™n (index 0)
            @Override
            public boolean isCellEditable(int r, int c) { return false; }
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0) return ImageIcon.class;
                return Object.class;
            }
        };

        tblSP = new JTable(modelSP);
        scrSP = new JScrollPane(tblSP);
        pnCenter.add(scrSP);
        
        formatTable(tblSP); // ƒê·ªãnh d·∫°ng chung cho b·∫£ng

        // ƒê·ªãnh d·∫°ng m√†u v√† s·ª± ki·ªán ri√™ng
        tblSP.setRowHeight(55);
        tblSP.setSelectionBackground(pinkPastel);
        tblSP.getTableHeader().setBackground(blueMint);
        tblSP.addMouseListener(this);
    }
    
    private void formatTable(JTable table) {
        table.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 18));
        table.setFont(new Font("Segoe UI", Font.PLAIN, 18));
        table.setShowGrid(false);
        table.setRowHeight(50);
        table.getTableHeader().setReorderingAllowed(false);

        DefaultTableCellRenderer center = new DefaultTableCellRenderer();
        center.setHorizontalAlignment(JLabel.CENTER);
        DefaultTableCellRenderer right = new DefaultTableCellRenderer();
        right.setHorizontalAlignment(JLabel.RIGHT);

        TableColumnModel m = table.getColumnModel();
        // C·ªë ƒë·ªãnh k√≠ch th∆∞·ªõc c·ªôt H√¨nh ·∫£nh v√† M√£ s·∫£n ph·∫©m
        m.getColumn(0).setMinWidth(60);
        m.getColumn(0).setMaxWidth(60);
        m.getColumn(1).setMinWidth(120);
        m.getColumn(1).setMaxWidth(120);
        
        // ƒê·∫∑t cƒÉn ph·∫£i cho c·ªôt gi√°, c√≤n l·∫°i cƒÉn gi·ªØa
        for (int i = 2; i < m.getColumnCount(); i++) {
            String col = m.getColumn(i).getHeaderValue().toString().toLowerCase();
            if (col.contains("gi√°")) m.getColumn(i).setCellRenderer(right);
            else m.getColumn(i).setCellRenderer(center);
        }
    }

    // --- X·ª¨ L√ù D·ªÆ LI·ªÜU (LOAD/T√åM KI·∫æM/L·ªåC) ---
    
    private void loadLoaiSanPham() {
        cboLoaiHang.addItem("T·∫•t c·∫£");
        // NOTE: ƒê·ªï d·ªØ li·ªáu t·ª´ enum LoaiSanPham v√†o JComboBox
        for (LoaiSanPham loai : LoaiSanPham.values()) {
            cboLoaiHang.addItem(loai.name());
        }
    }

    /** üîπ N·∫°p t·∫•t c·∫£ s·∫£n ph·∫©m */
    private void loadSanPham() {
        ArrayList<SanPham> ds = sanPhamDAO.layTatCaSanPham();
        hienThiDanhSach(ds);
    }

    /** üîπ T√¨m ki·∫øm theo t√™n ho·∫∑c m√£ */
    private void timKiemSanPham() {
        String keyword = txtSearch.getText().trim();
        ArrayList<SanPham> ds = sanPhamDAO.timKiemSanPham(keyword);
        hienThiDanhSach(ds);
    }

    /** üîπ L·ªçc theo lo·∫°i t·ª´ ComboBox */
    private void locTheoLoai() {
        String selected = (String) cboLoaiHang.getSelectedItem();
        if (selected == null || selected.equals("T·∫•t c·∫£")) {
            loadSanPham(); // Hi·ªÉn th·ªã t·∫•t c·∫£ n·∫øu ch·ªçn "T·∫•t c·∫£"
            return;
        }

        try {
            // Chuy·ªÉn t√™n lo·∫°i t·ª´ ComboBox sang Enum
            LoaiSanPham loai = LoaiSanPham.valueOf(selected);
            ArrayList<SanPham> ds = sanPhamDAO.laySanPhamTheoLoai(loai);
            hienThiDanhSach(ds);
        } catch (IllegalArgumentException e) {
            loadSanPham(); // Tr√°nh l·ªói n·∫øu gi√° tr·ªã trong ComboBox kh√¥ng h·ª£p l·ªá
        }
    }

    /** Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m l√™n b·∫£ng */
    private void hienThiDanhSach(ArrayList<SanPham> ds) {
        modelSP.setRowCount(0);
        for (SanPham sp : ds) {
            ImageIcon icon = null;
            // NOTE: T·∫£i ·∫£nh s·∫£n ph·∫©m (ho·∫∑c ·∫£nh null n·∫øu kh√¥ng t√¨m th·∫•y)
            URL url = getClass().getResource("/images/" + sp.getHinhAnh()); 
            if (url == null)
                url = getClass().getResource("/images/icon_anh_sp_null.png");
            if (url != null)
                icon = new ImageIcon(new ImageIcon(url).getImage().getScaledInstance(45, 45, Image.SCALE_SMOOTH));

            modelSP.addRow(new Object[]{
                icon,
                sp.getMaSanPham(),
                sp.getTenSanPham(),
                mapLoaiSanPham(sp.getLoaiSanPham()), // Chuy·ªÉn Enum sang chu·ªói m√¥ t·∫£
                sp.getSoDangKy(),
                mapDuongDung(sp.getDuongDung()), // Chuy·ªÉn Enum sang chu·ªói m√¥ t·∫£
                df.format(sp.getGiaNhap()),
                df.format(sp.getGiaBan()),
                sp.getKeBanSanPham(),
                sp.isHoatDong() ? "ƒêang b√°n" : "Ng·ª´ng b√°n"
            });
        }
    }

    // --- C√ÅC H√ÄM MAPPER (Chuy·ªÉn ƒë·ªïi Enum sang String) ---
    
    // NOTE: C√°c h√†m n√†y chuy·ªÉn Enum (LoaiSanPham, DuongDung) th√†nh chu·ªói m√¥ t·∫£ ƒë·ªÉ hi·ªÉn th·ªã
    private String mapLoaiSanPham(LoaiSanPham loai) {
        if (loai == null) return "";
        return loai.getTenLoai();
    }

    private String mapDuongDung(DuongDung dd) {
        if (dd == null) return "";
        return dd.getMoTa();
    }

    // --- X·ª¨ L√ù S·ª∞ KI·ªÜN CHU·ªòT ---

    @Override
    public void mouseClicked(MouseEvent e) {
        // NOTE: X·ª≠ l√Ω click ƒë√∫p chu·ªôt ƒë·ªÉ xem chi ti·∫øt
        if (e.getClickCount() == 2) { 
            int row = tblSP.getSelectedRow();
            if (row >= 0) {
                 btnXemChiTiet.doClick(); // K√≠ch ho·∫°t s·ª± ki·ªán n√∫t "Chi ti·∫øt"
            }
        }
    }

    // C√°c h√†m l·∫Øng nghe s·ª± ki·ªán chu·ªôt kh√¥ng d√πng ƒë·∫øn
    @Override public void mousePressed(MouseEvent e) {}
    @Override public void mouseReleased(MouseEvent e) {}
    @Override public void mouseEntered(MouseEvent e) {}
    @Override public void mouseExited(MouseEvent e) {}

    // --- MAIN (H√†m ch·∫°y th·ª≠) ---

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Qu·∫£n l√Ω s·∫£n ph·∫©m");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(1400, 800);
            frame.setLocationRelativeTo(null);
            frame.setContentPane(new SanPham_GUI());
            frame.setVisible(true);
        });
    }
}